// SPDX-License-Identifier: MIT
// Copyright (C) 2021 Roland Csaszar
// File: build.fsx
//
//==============================================================================

#r "paket:
nuget AltCover.Api >= 7.0
nuget Fake.DotNet.NuGet
nuget Fake.DotNet.Cli
nuget Fake.IO.FileSystem
nuget Fake.Core.Target //"
#load ".fake/build.fsx/intellisense.fsx"

open Fake.Core
open Fake.DotNet
open Fake.DotNet.NuGet
open Fake.IO
open Fake.IO.Globbing.Operators
open Fake.Core.TargetOperators

Target.initEnvironment ()

// set output paths
let buildOutputPath = "artifacts"  // everything generated by `dotnet build` goes here
let packageOutputPath = "packages" // Nuget packages go here
let testOutputPath = "test_results"
let exeOutPath = "bin"
let rootDirAbs = Path.getFullName "."
let testOutAbs = Path.combine rootDirAbs testOutputPath
let builOutAbs = Path.combine rootDirAbs buildOutputPath
let coverageFile = Path.combine testOutAbs "coverage.xml"


// set common build options, like `nologo`, and the output path
let commonDotNetOpts = DotNet.Options.Create ()
let uploadOpts = NuGet.NuGetPushParams.Create ()
let release = DotNet.BuildConfiguration.Release
let debug = DotNet.BuildConfiguration.Debug

// Build options for the targets `Build` and `BuildDeb`
let setBuildOpts config (opts:DotNet.BuildOptions) =
    { opts with
        OutputPath = Some buildOutputPath
        NoLogo = true
        Common = commonDotNetOpts
        Configuration = config
    }
let setBuildOptsDeb = setBuildOpts debug
let setBuildOptsRel = setBuildOpts release

// Test options for the target `Tests`
let setTestOpts config (opts:DotNet.TestOptions) =
    { opts with
        Configuration = config
        Output = Some buildOutputPath
        NoBuild = true
        NoLogo = true
        Common = { commonDotNetOpts with
                    Verbosity = Some DotNet.Verbosity.Normal
                 }
        ResultsDirectory = Some testOutputPath
        Logger = Some "trx"
     }

let setTestOptsRel = setTestOpts release
let setTestOptsDeb = setTestOpts debug

// Coverage test options for the targets `TestCoverage` and `TestCoverageDeb`
let setCoverageOpts config (opts:DotNet.TestOptions) =
    { opts with
        Configuration = config
        Output = Some buildOutputPath
        NoBuild = true
        NoLogo = true
        Common = { commonDotNetOpts with
                    CustomParams = Some (
                                    sprintf "/p:AltCover=true /p:AltCoverReport=%s"
                                    <| coverageFile
                                    )
                    Verbosity = Some DotNet.Verbosity.Normal
                 }
        ResultsDirectory = Some testOutputPath
    }

let setCoverageOptsRel = setCoverageOpts release
let setCoverageOptsDeb = setCoverageOpts debug

// Nuget packaging options for target `Packages`
let setPackageOpts (opts:DotNet.PackOptions) =
    { opts with
        NoLogo = true
        NoBuild = true
        OutputPath = Some packageOutputPath
        IncludeSymbols = false
        Configuration = release
        Common = { commonDotNetOpts with
                    CustomParams = Some (
                                    sprintf "/p:OutputPath=%s" builOutAbs
                                    )
                  }
    }

// Nuget upload options for `Upload`
let setUploadOpts (opts:DotNet.NuGetPushOptions) =
    { opts with
        Common = commonDotNetOpts
        PushParams = { uploadOpts with
                        Source = Some "https://api.nuget.org/v3/index.json"
                        NoSymbols = true
                        DisableBuffering = true
                        ApiKey = None
                      //  NoServiceEndpoint = false
        }
    }

// Publish options for Target `Publish`
let setPublishOptions rid (opts:DotNet.PublishOptions) =
    { opts with
        NoLogo = true
        NoBuild = false
        OutputPath = Some exeOutPath
        Configuration = release
        SelfContained = Some true
        Runtime = Some rid
        Common = commonDotNetOpts
    }

//==============================================================================
//                               Clean
//
Target.create "Clean" (fun _ ->
    !! "src/**/bin"
    ++ "src/**/obj"
    ++ "tests/**/bin"
    ++ "tests/**/obj"
    ++ buildOutputPath
    ++ packageOutputPath
    ++ testOutputPath
    ++ exeOutPath
    |> Shell.cleanDirs

    !! "src/**/*.exn"
    ++ "tests/**/*.exn"
    ++ "tests/**/coverage.xml"
    |> Seq.iter File.delete
)

//==============================================================================
//                               Distclean
//
Target.create "Distclean" (fun _ ->
    !! "site/"
    ++ ".ionide/"
    ++ ".fake"
    ++ ".paket"
    ++ ".paket-files"
    ++ ".vs"
    |> Shell.deleteDirs
)


//==============================================================================
//                               Lint
//
let execFSharpLint projFile =
    let result = DotNet.exec id "fsharplint" (sprintf "lint %s" projFile)

    if result.ExitCode <> 0 then failwith "Lint exited with an error!"

Target.create "Lint" (fun _ ->
    !! "src/**/*.*proj"
    ++ "tests/**/*.*proj"
    |> Seq.iter execFSharpLint
)


//==============================================================================
//                               Build
//
Target.create "Build" (fun _ ->
    !! "src/**/*.*proj"
    ++ "tests/**/*.*proj"
    |> Seq.iter (DotNet.build setBuildOptsRel)
)

//==============================================================================
//                              Debug Build
//
Target.create "BuildDeb" (fun _ ->
    !! "src/**/*.*proj"
    ++ "tests/**/*.*proj"
    |> Seq.iter (DotNet.build setBuildOptsDeb)
)


//==============================================================================
//                               Docs
//
Target.create "Docs" (fun _ ->
    CreateProcess.fromRawCommand "pipenv" [ "run"; "mkdocs"; "build" ]
    |> CreateProcess.ensureExitCode // will make sure to throw on error
    |> CreateProcess.withWorkingDirectory "."
    |> Proc.run
    |> ignore
)

//==============================================================================
//                               Tests
//
Target.create "Tests" (fun _ ->
    !! "tests/**/*.*proj"
    |> Seq.iter (DotNet.test setTestOptsRel)
)

//==============================================================================
//                             Debug Tests
//
Target.create "TestsDeb" (fun _ ->
    !! "tests/**/*.*proj"
    |> Seq.iter (DotNet.test setTestOptsDeb)
)

//==============================================================================
//                     Tests & Coverage (Always Debug)
//
Target.create "TestsCoverage" (fun _ ->
    !! "tests/**/*.*proj"
    |> Seq.iter (DotNet.test setCoverageOptsDeb)
)

//==============================================================================
//                           Debug Tests & Coverage
//
Target.create "TestsCoverageDeb" (fun _ ->
    !! "tests/**/*.*proj"
    |> Seq.iter (DotNet.test setCoverageOptsDeb)
)


//==============================================================================
//                             Packages
//
Target.create "Packages" (fun _ ->
    !! "src/**/*.*proj"
    ++ "tests/**/*.*proj"
    |> Seq.iter (DotNet.pack setPackageOpts)
)

//==============================================================================
//                          Upload Packages
//
Target.create "Upload" (fun _ ->
    !! (Path.combine packageOutputPath "*.nupkg")
    |> Seq.iter (DotNet.nugetPush setUploadOpts)
)


//==============================================================================
//                             Publish
//
Target.create "Publish" (fun _ ->
    !! "src/**/*.*proj"
    ++ "tests/**/*.*proj"
    |> Seq.iter (DotNet.publish (setPublishOptions "win-x64"))
)


//==============================================================================
//                      Package Fake 4 API
//
//open Fake.DotNet.NuGet
//Target.create "Package" (fun _ ->
//    copyFiles packagingOutputDirectory allFilesToPackage
//    NuGet.NuGet (fun p ->
//        { p with
//            Version = buildVersion
//            Authors = authors
//            Project = projectName
//            Summary = projectSummary
//            Description = projectDescription
//            WorkingDir = packagingDirectory
//            OutputPath = artifactOutputDirectory
//            AccessKey = myAccessKey
//            Publish = true })
//        "template.nuspec"
//)

//==============================================================================
//                                 All
//
Target.create "All" ignore

//==============================================================================
//                                Release
//
Target.create "Release" ignore


//==============================================================================
//                             Target Dependencies
//
"Clean" ==> "Distclean"

"Clean" ==> "Build" ==> "Lint"

"Clean" ==> "Build" ==> "Packages" ==> "Upload" ==> "Release"

"Clean" ==> "Build" ==> "Docs" ==> "Release"

"Clean" ==> "Publish" ==> "Release"

"Clean" ==> "Build" ==> "Tests"

"Clean" ==> "BuildDeb" ==> "TestsDeb"

"Clean" ==> "BuildDeb" ==> "TestsCoverage"

"Clean" ==> "BuildDeb" ==> "TestsCoverageDeb"

"Clean"
    ==> "Build"
    ==> "Docs"
    ?=> "Tests"
    ?=> "Publish"
    ==> "Packages"
    ==> "All"

Target.runOrDefault "All"
